<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd">
    <!--把对象的创建交给bean来管理-->
    <!--第一种方式：使用默认构建函数创建-->
<!--    <bean id="accountService" class="com.hzau.service.impl.AccountServiceImpl"/>-->
    <!--第二种方式：使用普通工厂中的方法创建对象-->
<!--    <bean id="instanceFactory" class="com.hzau.factory.InstanceFactory"/>-->
<!--    <bean id="accountService" factory-bean="instanceFactory" factory-method="getAccountService"/>-->
    <!--第三种方式：使用工厂中的静态方法来创建对象-->
<!--    <bean id="accountService" class="com.hzau.factory.StaticFactory" factory-method="getAccountService"/>-->


    <!--bean的作用范围
        bean标签的scope属性：
        作用：用于指定bean的作用范围
        取值：
            singleton:单例(默认值)
            prototype:多例
            request:作用于web应用的请求范围
            session:作用于web的会话范围
            global-session:作用于集群环境的会话创建(全局会话范围)，当不是集群环境时，它就是session-->
<!--        <bean id="accountService" class="com.hzau.service.impl.AccountServiceImpl" scope="prototype"/>-->
        <!--bean对象的生命周期
            单例对象
                出生：容器创建时对象出生
                活着：只要容器还在，对象一直活着
                死亡：容器销毁，对象死亡
                总结：单例对象的生命周期和容器相同
            多例对象
                出生: 当我们使用对象时，创建对象
                活着：对象在使用过程中一直活着
                死亡：当对象长时间不使用，且没有别的对象引用时，由Java的垃圾回收器回收
        -->
      <!--  <bean id="accountService" class="com.hzau.service.impl.AccountServiceImpl"
              scope="prototype" init-method="init" destroy-method="destroy"/>-->

        <!--spring中的依赖注入
            依赖注入：
                Dependency Injection
            IOC的作用：
                降低耦合
            依赖关系的管理：
                以后都交给spring来维护
            当前类需要用到其他类对象，由spring为我们提供，只需在配置文件中说明
            依赖关系的维护：
                称之为依赖注入
            依赖注入：
                能注入的数据：
                    基本类型和String
                    其他bean类型(在配置文件中活着注解配置中配置过的bean)
                    复杂类型/集合类型
                注入的方式：
                    第一种：使用构造函数提供
                    第二种：使用set方法提供
                    第三种：使用注解提供-->
    <!--构造函数注入-->
   <!-- <bean id="accountService" class="com.hzau.service.impl.AccountServiceImpl">
        <constructor-arg name="name" value="test"/>
        <constructor-arg name="age" value="12"/>
        <constructor-arg name="birthday" ref="now"/>
    </bean>-->
    <!--配置一个日期-->
   <!-- <bean id="now" class="java.util.Date"/>-->

    <!--set方法注入-->
  <!--  <bean id="accountService2" class="com.hzau.service.impl.AccountServiceImpl2">
        <property name="name" value="张三"/>
        <property name="age" value="18"/>
        <property name="birthday" ref="now"/>
    </bean>-->

    <!--复杂类型的注入/集合类型的注入-->
    <!--<bean id="accountService3" class="com.hzau.service.impl.AccountServiceImpl3">
        <property name="myStrings">
            <array>
                <value>AAA</value>
                <value>BBB</value>
                <value>CCC</value>
            </array>
        </property>
        <property name="myList">
            <list>
                <value>AAA</value>
                <value>BBB</value>
                <value>CCC</value>
            </list>
        </property>
        <property name="mySet">
            <set>
                <value>AAA</value>
                <value>BBB</value>
                <value>CCC</value>
            </set>
        </property>
        <property name="myMap">
            <map>
                <entry key="testA" value="aaa"/>
                <entry key="testB" value="bbb"/>
            </map>
        </property>
        <property name="myProps">
            <props>
                <prop key="testC">ccc</prop>
                <prop key="testD">DDD</prop>
            </props>
        </property>
    </bean>-->
    <!--告知spring在创建容器是要扫描的包-->
    <context:component-scan base-package="com.hzau"/>
</beans>
